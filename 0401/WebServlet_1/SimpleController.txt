package com;

import java.io.IOException;
import java.util.Date;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/*
	web.xml 설정
	<url-pattern>/simple</url-pattern> 설정하면
	localhost:8090/WebServlet/simple 요청이 오면
	public class SimpleController 이 자바 파일을 컴파일 하고 실행 하겠다
	
	서블릿이란 java로 만든 웹서비스 파일
	서블릿의 조건 : java 파일이 extends HttpServlet 이파일을 상속해야 한다
	>>웹이 요청(request)객체 랑 응답(response)객체를 사용 가능
	서브릿은 url에서 바로 요청이 안된다 그 요청을 만들고 mapping이 들어가서 요청 주소를 생성해야 하는데
	생성 방법 2가지가 있는데 1. web.xml에서 2. @webServlet(어노테이션?)
	
	서블릿은 extends HttpServlet 반드시 상속해야만 웹에서 사용가능
	SimpleController 서블릿 파일 웹 전용
	servlet 이벤트 기반의 동작 (특정 사건(이벤트) 가 발생하면 자동 호출되는 함수 존재)
	자동 호출 되는 함수가 무엇이냐? >> 
	-protected void doGet()
	>>localhost:8090/WebServlet/simple 요청방식이 get방식이면 자동으로 doget 호출
	>><form method = "GET" or <a href="/simple?num=100> 이런 형식
	
	-protected void doPost()
	>>localhost:8090/WebServlet/simple 요청방식이 POST방식이면 자동으로 dopost 호출
	>><form method = "POST"
	
	doGet() , doPost() 이 둘은 데이터를 받을수 있어야 한다(request ,response 객체를 사용할 수 있어야 한다)
	그래서 (HttpServletRequest request, HttpServletResponse response) 파라미터 값 받는다
	그래서 함수 안에서 request , response객체를 사용가능할 수 있다
	
	
	
	
	
*/
public class SimpleController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
   
    public SimpleController() {
        super();
        System.out.println("SimpleController 생성자 함수 호출");
    }

  //클라이언트 요청 방식이 get일때
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("클라이언트 요청 : get방식");
		
		//JSP 페이지 작업 내용 그대로 작성
		//1.한글처리
		request.setCharacterEncoding("UTF-8");
		
		//2.데이터받기(클라이언트가 요청한 의도 파악)
		String type = request.getParameter("type");
		
		//3.로직 (요청에 따른 업무 수행) >> service
		Object resultobj = null;
		if(type == null || type.equals("greeting")) {
			resultobj = "hello world";
		}else if(type.equals("date")){
			resultobj = new Date();
		}else {
			resultobj = "invalid String type";
		}
		
		//4.요청 완료에 따른 결과를 저장
		//MVC 패턴 방식... (화면을 JSP) 서블릿에 만든 객체 정보를 JSP까지 전달
		//그 결과를 저장 할 건데 session변수 , 특정 페이지(include forward) 사용하려면 request 변수
		request.setAttribute("result", resultobj);
		
		//5.저장한 결과를 JSP 전달을 해서 화면 (UI)를 구성
		//결과를 forward 방식을 통해서 JSP에게 넘겨줄거다
		//장점: 클라이언트가 요청한 주소는 변하지 않고 buffer forward 페이지 정보를 담아서 서비스
		
		RequestDispatcher dis = request.getRequestDispatcher("/simpleview.jsp");
		//getRequestDispatcher() 역할은 view 페이지 정의 하기
		//RequestDispatcher란
		//RequestDispatcher는 클라이언트로부터 최초에 들어온 요청을 JSP/Servlet 내에서 원하는 자원으로 요청을 넘기는(보내는) 역할을 수행하거나, 특정 자원에 처리를 요청하고 처리 결과를 얻어오는 기능을 수행하는 클래스입니다.


		//정의한 페이지를 forward
		dis.forward(request,response);
		//serlvet 가지고 있는 request객체의 주소와 response객체의 주소를 넘겨서 사용 하겠다
		
		
	}

	//클라이언트 요청 방식이 post일때
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("클라이언트 요청 : post방식");
	
	
		
		
	}

}
